[project]
name = "hazard"
version = "0.1.0"
description = "OS-Climate Physical Risk Hazard Indicator Generation"
authors = [
    { name = "Joe Moorhouse", email = "5102656+joemoorhouse@users.noreply.github.com" },
]
requires-python = ">=3.10,<3.13"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["Physical", "Climate", "Risk", "Finance"]

classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
]

dependencies = [
    "cartopy",
    "cdsapi~=0.7.6",
    "cftime~=1.6.4.post1",
    "dask[dataframe,distributed]>=2025.9.0",
    "fire~=0.7.0",
    "fsspec~=2025.5.1",
    "geopandas~=0.14.4",
    "h5netcdf~=1.6.1",
    "mapbox~=0.18.1",
    "matplotlib",
    "mercantile~=1.2.1",
    "mkdocs~=1.6.1",
    "numpy~=1.26.4",
    "pydantic>=2.11.5",
    "pymdown-extensions~=10.15",
    "pyproj",
    "pystac-client",
    "pystac",
    "python-dotenv~=1.1.0",
    "rasterio~=1.4.3",
    "rioxarray~=0.17.0",
    "s3fs~=2025.5.1",
    "scipy~=1.11.0",
    "seaborn~=0.13.2",
    "shapely~=2.1.1",
    "tomli~=2.2.1; python_version < \"3.11\"",
    "typer~=0.16.0",
    "xarray",
    "cf_xarray",
    "xclim~=0.47.0",
    "zarr<3",
]

[dependency-groups]
dev = ["mypy~=1.16.0", "pre-commit~=4.2.0", "ruff~=0.11.13"]
test = [
    "pdm[pytest]~=2.24.2",
    "pytest-cov~=6.1.1",
    "pytest~=8.4.0",
    "sphinx-pyproject~=0.3.0",
]

[project.urls]
Homepage = "https://github.com/os-climate/hazard"
Repository = "https://github.com/os-climate/hazard"
Downloads = "https://github.com/os-climate/hazard/releases"
"Bug Tracker" = "https://github.com/os-climate/hazard/issues"
Documentation = "https://github.com/os-climate/hazard/tree/main/docs"
"Source Code" = "https://github.com/os-climate/hazard"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "-v"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
#addopts = "--cov --cov-report html --cov-report term-missing --cov-fail-under 95"

[tool.mypy]
warn_unreachable = true
ignore_missing_imports = true

[tool.coverage.run]
source = "src"
omit = "tests/*"
relative_files = true

[tool.pdm.resolution.overrides]
numpy = "<2"
zarr = "<3"

[tool.pdm.build]
package-dir = "src"
includes = ["src/hazard"]
excludes = ["tests"]

[tool.pdm.scripts]
pre_release = "scripts/dev-versioning.sh"
release = "scripts/release-versioning.sh"
test = "pytest"
docs = { shell = "cd docs && mkdocs serve", help = "Start the dev server for doc preview" }
lint = "pre-commit run --all-files"
mypy = { cmd = "mypy --install-types --non-interactive src" }
all = { composite = ["lint", "mypy", "pytest"] }
complete = { call = "tasks.complete:main", help = "Create autocomplete files for bash and fish" }

[project.scripts]
os_climate_hazard = "hazard.cli:cli"
osc_hazard = "hazard.cli:app"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
extend-fixable = [
    # Instead of trailing-whitespace
    "W291",
    "W293",
]

extend-select = [
    # Instead of pydocstyle
    "D",
    #Instead of flake8
    "E",
    "F",
    "B",
    # Instead of pep8-naming
    "N",
    # Instead of flake8-debugger or debug-statements
    "T10",
    #For escape sequences
    "W605",
]

ignore = [
    "E203",
    "E501",
    # Avoid incompatible rules
    "D203",
    "D213",
    # We are using a docstyle format closer to google than to numpy
    "D407",

    # Ignore this rules so that precommit passes. Uncomment to start fixing them
    "B006",
    "B008",
    "B904",
    "B012",
    "B024",
    "B020",
    "D",
    "F401",
    "F811",
]

[tool.ruff.lint.extend-per-file-ignores]
# Ignore `D` rules everywhere except for the `src/` directory.
"!src/**.py" = ["D"]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.uv]
default-groups = ["dev", "test"]
